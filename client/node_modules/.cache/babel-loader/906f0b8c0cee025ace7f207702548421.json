{"ast":null,"code":"var request = require('request');\n\nvar parseString = require('xml2js').parseString;\n\nvar api = require('./api');\n\nmodule.exports = function (anime) {\n  anime.search = function (query, callback) {\n    var ret = {\n      success: true,\n      message: ''\n    };\n    anime.retrieveLogin(function (err, json) {\n      if (err) {\n        ret.success = false;\n        ret.message = 'Please login with `anime login`';\n        callback(ret);\n      } else {\n        search(query, json, callback, ret);\n      }\n    });\n  };\n\n  function search(query, auth, callback, ret) {\n    request({\n      'url': api['SEARCH'] + encodeURIComponent(query),\n      'headers': {\n        'User-Agent': api['USER_AGENT']\n      },\n      'auth': {\n        'user': auth.username,\n        'pass': auth.password,\n        'sendImmediately': true\n      }\n    }, function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        parseString(body, function (err, result) {\n          var searchResults = [];\n          var entries = result.anime.entry;\n\n          for (var i = 0; i < Math.min(10, entries.length); i++) {\n            var english = toString.call(entries[i].english) === \"[object Array]\" ? entries[i].english[0] : entries[i].english;\n            var sres = {\n              title: entries[i].title[0],\n              id: entries[i].id[0],\n              english: english,\n              episodes: entries[i].episodes[0]\n            };\n            searchResults.push(sres);\n          }\n\n          ret.searchResults = searchResults;\n          callback(ret);\n        });\n      } else {\n        ret.success = false;\n        ret.message = response && response.statusCode === 204 ? 'No such animes found' : error.toString();\n        callback(ret);\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/ramon/Documentos/web/react/blog-data-science/node_modules/anime/search.js"],"names":["request","require","parseString","api","module","exports","anime","search","query","callback","ret","success","message","retrieveLogin","err","json","auth","encodeURIComponent","username","password","error","response","body","statusCode","result","searchResults","entries","entry","i","Math","min","length","english","toString","call","sres","title","id","episodes","push"],"mappings":"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","sourcesContent":["var request = require('request');\nvar parseString = require('xml2js').parseString;\n\nvar api = require('./api');\n\nmodule.exports = function(anime) {\n\n    anime.search = function(query, callback) {\n        var ret = {\n            success: true,\n            message: ''\n        };\n\n        anime.retrieveLogin(function(err, json) {\n            if (err) {\n                ret.success = false;\n                ret.message = 'Please login with `anime login`';\n\n                callback(ret);\n            } else {\n                search(query, json, callback, ret);\n            }\n        });\n    };\n\n    function search(query, auth, callback, ret) {\n        request({\n            'url': api['SEARCH'] + encodeURIComponent(query),\n            'headers': {\n                'User-Agent': api['USER_AGENT']\n            },\n            'auth': {\n                'user': auth.username,\n                'pass': auth.password,\n                'sendImmediately': true\n            }\n        }, function(error, response, body) {\n            if (!error && response.statusCode === 200) {\n                \n                parseString(body, function(err, result) {\n                    var searchResults = [];\n                    var entries = result.anime.entry;\n\n                    for (var i = 0; i < Math.min(10, entries.length); i++) {\n                        var english = (toString.call(entries[i].english) === \"[object Array]\") ? entries[i].english[0] : entries[i].english;\n                        var sres = {\n                            title: entries[i].title[0],\n                            id: entries[i].id[0],\n                            english: english,\n                            episodes: entries[i].episodes[0]\n                        }\n                        searchResults.push(sres);\n                    }\n\n                    ret.searchResults = searchResults;\n                    callback(ret);\n                });\n\n            } else {\n                ret.success = false;\n                ret.message = (response && response.statusCode === 204) ? 'No such animes found' : error.toString();\n\n                callback(ret);\n            }\n        });\n    }\n\n};"]},"metadata":{},"sourceType":"script"}