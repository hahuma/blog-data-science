{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar trimRepeated = require('trim-repeated');\n\nvar filenameReservedRegex = require('filename-reserved-regex');\n\nvar stripOuter = require('strip-outer'); // doesn't make sense to have longer filenames\n\n\nvar MAX_FILENAME_LENGTH = 100;\nvar reControlChars = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reRelativePath = /^\\.+/;\n\nvar fn = module.exports = function (str, opts) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  opts = opts || {};\n  var replacement = opts.replacement || '!';\n\n  if (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {\n    throw new Error('Replacement string cannot contain reserved filename characters');\n  }\n\n  str = str.replace(filenameReservedRegex(), replacement);\n  str = str.replace(reControlChars, replacement);\n  str = str.replace(reRelativePath, replacement);\n\n  if (replacement.length > 0) {\n    str = trimRepeated(str, replacement);\n    str = str.length > 1 ? stripOuter(str, replacement) : str;\n  }\n\n  str = str.slice(0, MAX_FILENAME_LENGTH);\n  return str;\n};\n\nfn.path = function (pth, opts) {\n  pth = path.resolve(pth);\n  return path.join(path.dirname(pth), fn(path.basename(pth), opts));\n};","map":{"version":3,"sources":["/home/ramon/Documentos/web/react/blog-data-science/node_modules/filenamify/index.js"],"names":["path","require","trimRepeated","filenameReservedRegex","stripOuter","MAX_FILENAME_LENGTH","reControlChars","reRelativePath","fn","module","exports","str","opts","TypeError","replacement","test","Error","replace","length","slice","pth","resolve","join","dirname","basename"],"mappings":"AAAA;;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIE,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,aAAD,CAAxB,C,CAEA;;;AACA,IAAII,mBAAmB,GAAG,GAA1B;AAEA,IAAIC,cAAc,GAAG,uBAArB;AACA,IAAIC,cAAc,GAAG,MAArB;;AAEA,IAAIC,EAAE,GAAGC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC9C,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC5B,UAAM,IAAIE,SAAJ,CAAc,mBAAd,CAAN;AACA;;AAEDD,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,MAAIE,WAAW,GAAGF,IAAI,CAACE,WAAL,IAAoB,GAAtC;;AAEA,MAAIX,qBAAqB,GAAGY,IAAxB,CAA6BD,WAA7B,KAA6CR,cAAc,CAACS,IAAf,CAAoBD,WAApB,CAAjD,EAAmF;AAClF,UAAM,IAAIE,KAAJ,CAAU,gEAAV,CAAN;AACA;;AAEDL,EAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAYd,qBAAqB,EAAjC,EAAqCW,WAArC,CAAN;AACAH,EAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAYX,cAAZ,EAA4BQ,WAA5B,CAAN;AACAH,EAAAA,GAAG,GAAGA,GAAG,CAACM,OAAJ,CAAYV,cAAZ,EAA4BO,WAA5B,CAAN;;AAEA,MAAIA,WAAW,CAACI,MAAZ,GAAqB,CAAzB,EAA4B;AAC3BP,IAAAA,GAAG,GAAGT,YAAY,CAACS,GAAD,EAAMG,WAAN,CAAlB;AACAH,IAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,GAAa,CAAb,GAAiBd,UAAU,CAACO,GAAD,EAAMG,WAAN,CAA3B,GAAgDH,GAAtD;AACA;;AAEDA,EAAAA,GAAG,GAAGA,GAAG,CAACQ,KAAJ,CAAU,CAAV,EAAad,mBAAb,CAAN;AAEA,SAAOM,GAAP;AACA,CAzBD;;AA2BAH,EAAE,CAACR,IAAH,GAAU,UAAUoB,GAAV,EAAeR,IAAf,EAAqB;AAC9BQ,EAAAA,GAAG,GAAGpB,IAAI,CAACqB,OAAL,CAAaD,GAAb,CAAN;AACA,SAAOpB,IAAI,CAACsB,IAAL,CAAUtB,IAAI,CAACuB,OAAL,CAAaH,GAAb,CAAV,EAA6BZ,EAAE,CAACR,IAAI,CAACwB,QAAL,CAAcJ,GAAd,CAAD,EAAqBR,IAArB,CAA/B,CAAP;AACA,CAHD","sourcesContent":["'use strict';\nvar path = require('path');\nvar trimRepeated = require('trim-repeated');\nvar filenameReservedRegex = require('filename-reserved-regex');\nvar stripOuter = require('strip-outer');\n\n// doesn't make sense to have longer filenames\nvar MAX_FILENAME_LENGTH = 100;\n\nvar reControlChars = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reRelativePath = /^\\.+/;\n\nvar fn = module.exports = function (str, opts) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\topts = opts || {};\n\n\tvar replacement = opts.replacement || '!';\n\n\tif (filenameReservedRegex().test(replacement) && reControlChars.test(replacement)) {\n\t\tthrow new Error('Replacement string cannot contain reserved filename characters');\n\t}\n\n\tstr = str.replace(filenameReservedRegex(), replacement);\n\tstr = str.replace(reControlChars, replacement);\n\tstr = str.replace(reRelativePath, replacement);\n\n\tif (replacement.length > 0) {\n\t\tstr = trimRepeated(str, replacement);\n\t\tstr = str.length > 1 ? stripOuter(str, replacement) : str;\n\t}\n\n\tstr = str.slice(0, MAX_FILENAME_LENGTH);\n\n\treturn str;\n};\n\nfn.path = function (pth, opts) {\n\tpth = path.resolve(pth);\n\treturn path.join(path.dirname(pth), fn(path.basename(pth), opts));\n};\n"]},"metadata":{},"sourceType":"script"}